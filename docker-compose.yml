version: "2"

services:
  app:
    build: ./ads-query-eval
    image: polyneme/ads-query-eval
    env_file:
      - ./config.env
    ports:
      - "8000"
    restart: unless-stopped

  mongo:
    image: mongo:4.4-bionic
    ports:
      - "27017"
    volumes:
      - mongo_data:/data/db
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: root


  dagster-postgresql:
    image: postgres:11
    volumes:
      - dagster_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "postgres_user"
      POSTGRES_PASSWORD: "postgres_password"
      POSTGRES_DB: "postgres_db"

  dagster-dagit:
    build: ./dagster
    image: polyneme/dagster-demo
    entrypoint: ["tini", "--", "../lib/repo/entrypoint-dagit.sh"]
    ports:
      - "3000"
    env_file:
      - ./config.env
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      - dagster-postgresql
    volumes:
      - ./dagster:/opt/dagster/lib

  dagster-daemon:
    build: ./dagster
    image: polyneme/dagster-demo
    entrypoint: ["tini", "--", "../lib/repo/entrypoint-daemon.sh"]
    restart: on-failure
    env_file:
      - ./config.env
    environment:
      DAGSTER_POSTGRES_USER: "postgres_user"
      DAGSTER_POSTGRES_PASSWORD: "postgres_password"
      DAGSTER_POSTGRES_DB: "postgres_db"
    depends_on:
      - dagster-postgresql
    volumes:
      - ./dagster:/opt/dagster/lib

  nginx:
    build: ./nginx
    image: polyneme/nginx
    env_file:
      - ./config.env
    volumes:
      - nginx_conf:/etc/nginx/sites
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot
      - ./vhosts:/etc/nginx/vhosts
      - ./html:/var/www/html
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

  certbot:
    build: ./certbot
    image: polyneme/certbot
    env_file:
      - ./config.env
    volumes:
      - letsencrypt_certs:/etc/letsencrypt
      - certbot_acme_challenge:/var/www/certbot

  cron:
    build: ./cron
    image: polyneme/cron
    environment:
      COMPOSE_PROJECT_NAME: "${COMPOSE_PROJECT_NAME}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workdir:ro
    restart: unless-stopped

volumes:
  nginx_conf:
    external:
      name: ${COMPOSE_PROJECT_NAME}_nginx_conf
  letsencrypt_certs:
    external:
      name: ${COMPOSE_PROJECT_NAME}_letsencrypt_certs
  mongo_data:
    external:
      name: ${COMPOSE_PROJECT_NAME}_mongo_data
  dagster_postgres_data:
    external:
      name: ${COMPOSE_PROJECT_NAME}_dagster_postgres_data
  certbot_acme_challenge:

